#!/bin/bash

##**************************************************************************
## Copyright (C) 2016-2025 Sergey Kovalenko <seryoga.engineering@gmail.com>
## SPDX-License-Identifier: MIT
##**************************************************************************
VERSION=1.0.6

# The command line help
function display_help () {
    echo "Usage: $0 [OPTION]" >&2
    echo "Available options:"
    echo "    -c, --clean-only      perform cleaning and exit"
    echo "    -h, --help            display help and exit"
    echo "    -v, --version         display version"
    echo "Default behavior (without options): clean and shutdown."
    exit
}

function display_version () {
    echo "advanced-system-cleaning (Advanced Linux System Cleaning) version $VERSION"
    echo "Copyright (C) 2016-2025 Sergey Kovalenko <seryoga.engineering@gmail.com>"
    echo "This is free software under MIT license."
    echo "In case of issue please report to <https://github.com/SeryogaBrigada/AdvancedLinuxSystemCleaning/issues>"
    exit
}

# Process arguments
while :
do
    case "$1" in
        -c | --clean-only)
            CLEAN_ONLY=1
            shift
            break
            ;;
        -h | --help)
            display_help
            exit 0
            ;;
        -v | --version)
            display_version
            exit 0
            ;;
        -*)
            echo "Error: Unknown option: $1" >&2
            display_help
            exit 1
            ;;
        *)  # No options
            break
            ;;
    esac
done

echo "######################################################################"
echo "                    Advanced Linux System Cleaning"
echo "######################################################################"

function clean_directory () {
    for TO_REMOVE in $(sudo ls "${1}")
    do
        echo "Deleting ${1}/$TO_REMOVE"
        sudo rm -rf >/dev/null 2>&1 "${1}/$TO_REMOVE"
    done
}

function get_free_space () {
    local LIST_OF_STORAGES=$(cat /proc/mounts | awk '{print $1}' | grep /dev)
    local TOTAL_FREE_SPACE
    for STORAGE in $LIST_OF_STORAGES
        do
            local DEV_FREE_SPACE=$(df $STORAGE | tail -n1 | awk '{print $4}')
            let TOTAL_FREE_SPACE=$TOTAL_FREE_SPACE+$DEV_FREE_SPACE
        done
    echo $TOTAL_FREE_SPACE
}

# Get available space at the beginning
FREE_SPACE_AT_START=$(get_free_space)

function clean_firefox_profile () {
    if [[ -d $1 ]]; then
        echo "Cleaning Firefox profile $1"
        cd "$1"
        rm -rf >/dev/null 2>&1 bounce-tracking-protection.sqlite
        rm -rf >/dev/null 2>&1 blocklist*
        rm -rf >/dev/null 2>&1 broadcast-listeners.json
        rm -rf >/dev/null 2>&1 bookmarkbackups
        rm -rf >/dev/null 2>&1 crashes
        rm -rf >/dev/null 2>&1 datareporting
        rm -rf >/dev/null 2>&1 domain_to_categories.*
        rm -rf >/dev/null 2>&1 minidumps
        rm -rf >/dev/null 2>&1 saved-telemetry-pings
        rm -rf >/dev/null 2>&1 addons.*
        rm -rf >/dev/null 2>&1 AlternateServices.*
        rm -rf >/dev/null 2>&1 ExperimentStoreData.*
        rm -rf >/dev/null 2>&1 containers.*
        rm -rf >/dev/null 2>&1 content-prefs.*
        rm -rf >/dev/null 2>&1 handlers.*
        rm -rf >/dev/null 2>&1 kinto.*
        rm -rf >/dev/null 2>&1 mimeTypes.*
        rm -rf >/dev/null 2>&1 permissions.*
        rm -rf >/dev/null 2>&1 pluginreg.*
        rm -rf >/dev/null 2>&1 secmod.*
        rm -rf >/dev/null 2>&1 security_state
        rm -rf >/dev/null 2>&1 serviceworker.*
        rm -rf >/dev/null 2>&1 sessionstore-logs
        rm -rf >/dev/null 2>&1 SecurityPreloadState.*
        rm -rf >/dev/null 2>&1 SiteSecurityServiceState.*
        rm -rf >/dev/null 2>&1 protections.sqlite
        rm -rf >/dev/null 2>&1 shield-preference-experiments.*
        rm -rf >/dev/null 2>&1 storage.*
        rm -rf >/dev/null 2>&1 Telemetry.ShutdownTime.*
        rm -rf >/dev/null 2>&1 times.*
        rm -rf >/dev/null 2>&1 webappsstore.*
        rm -rf >/dev/null 2>&1 weave
        cd ..
    fi
}

function clean_firefox {
    # 1 argument - path to profile
    # 2 argument - path to cache directory
    if [[ -d $1 ]]; then
        cd "$1"
        rm -rf >/dev/null 2>&1 "Crash Reports"
        rm -rf >/dev/null 2>&1 "Pending Pings"
        # Get a list of profiles directories
        for dir in */; do
            # Remove trailing "/" from the directory name
            dir=${dir%*/}
            clean_firefox_profile $dir
        done
    fi

    [[ -d $2/mozilla ]] && rm -rf "$2/mozilla";
    [[ -d $2/fontconfig ]] && rm -rf "$2/fontconfig";
    [[ -d $2/nvidia ]] && rm -rf "$2/nvidia";
}

# Mozilla Firefox
clean_firefox ~/.mozilla/firefox ~/.cache
clean_firefox ~/snap/firefox/common/.mozilla/firefox ~/snap/firefox/common/.cache

# Chromium and derivatives
function clean_chrome () {
if [[ -d ~/.config/$1 ]]; then
    echo "Cleaning $1"
    cd ~/.config/$1
    rm -rf >/dev/null 2>&1 AmountExtractionHeuristicRegexes
    rm -rf >/dev/null 2>&1 AutofillRegex
    rm -rf >/dev/null 2>&1 AutofillStates
    rm -rf >/dev/null 2>&1 BrowserMetrics
    rm -rf >/dev/null 2>&1 CertificateTransparency
    rm -rf >/dev/null 2>&1 CertificateRevocation
    rm -rf >/dev/null 2>&1 ClientSidePhishing
    rm -rf >/dev/null 2>&1 "Consent To Send Stats"
    rm -rf >/dev/null 2>&1 "Crash Reports"
    rm -rf >/dev/null 2>&1 "Crowd Deny"
    rm -rf >/dev/null 2>&1 DesktopSharingHub
    rm -rf >/dev/null 2>&1 DeferredBrowserMetrics
    rm -rf >/dev/null 2>&1 EVWhitelist
    rm -rf >/dev/null 2>&1 FileTypePolicies
    rm -rf >/dev/null 2>&1 FirstPartySetsPreloaded
    rm -rf >/dev/null 2>&1 "Fingerprinting Protection Filter"
    rm -rf >/dev/null 2>&1 Floc
    rm -rf >/dev/null 2>&1 GrShaderCache
    rm -rf >/dev/null 2>&1 InterventionPolicyDatabase
    rm -rf >/dev/null 2>&1 MEIPreload
    rm -rf >/dev/null 2>&1 NativeMessagingHosts
    rm -rf >/dev/null 2>&1 OnDeviceHeadSuggestModel
    rm -rf >/dev/null 2>&1 OptimizationHints
    rm -rf >/dev/null 2>&1 OriginTrials
    rm -rf >/dev/null 2>&1 PKIMetadata
    rm -rf >/dev/null 2>&1 Policy
    rm -rf >/dev/null 2>&1 ShaderCache
    rm -rf >/dev/null 2>&1 "Subresource Filter"
    rm -rf >/dev/null 2>&1 TLSDeprecationConfig
    rm -rf >/dev/null 2>&1 TrustTokenKeyCommitments
    rm -rf >/dev/null 2>&1 UrlParamClassifications
    rm -rf >/dev/null 2>&1 "Webstore Downloads"
    rm -rf >/dev/null 2>&1 WidevineCdm
    rm -rf >/dev/null 2>&1 SSLErrorAssistant
    rm -rf >/dev/null 2>&1 "Certificate Revocation Lists"
    rm -rf >/dev/null 2>&1 ZxcvbnData
    rm -rf >/dev/null 2>&1 pnacl
    rm -rf >/dev/null 2>&1 hyphen-data
    rm -rf >/dev/null 2>&1 Safe*
    rm -rf >/dev/null 2>&1 BrowserMetrics-spare.*
    rm -rf >/dev/null 2>&1 chrome_shutdown_ms.txt
    rm -rf >/dev/null 2>&1 .com.google.Chrome.*
    rm -rf >/dev/null 2>&1 persisted_first_party_sets.json
    rm -rf >/dev/null 2>&1 *_crx_cache
    rm -rf >/dev/null 2>&1 GraphiteDawnCache
    rm -rf >/dev/null 2>&1 "Local Traces"
    rm -rf >/dev/null 2>&1 optimization_guide_model_store
    rm -rf >/dev/null 2>&1 PrivacySandboxAttestationsPreloaded
    rm -rf >/dev/null 2>&1 screen_ai
    rm -rf >/dev/null 2>&1 segmentation_platform
    rm -rf >/dev/null 2>&1 TpcdMetadata
    rm -rf >/dev/null 2>&1 Variations
    rm -rf >/dev/null 2>&1 first_party_sets*

    if [[ -d Default ]]; then
        cd Default
        rm -rf >/dev/null 2>&1 ads_service
        rm -rf >/dev/null 2>&1 Accounts
        rm -rf >/dev/null 2>&1 AutofillStrikeDatabase
        rm -rf >/dev/null 2>&1 *.ldb
        rm -rf >/dev/null 2>&1 *.log
        rm -rf >/dev/null 2>&1 "Affiliation Database"
        rm -rf >/dev/null 2>&1 "Affiliation Database-journal"
        rm -rf >/dev/null 2>&1 "Application Cache"
        rm -rf >/dev/null 2>&1 BudgetDatabase
        rm -rf >/dev/null 2>&1 blob_storage
        rm -rf >/dev/null 2>&1 commerce_subscription_db
        rm -rf >/dev/null 2>&1 coupon_db
        rm -rf >/dev/null 2>&1 discounts_db
        rm -rf >/dev/null 2>&1 "data_reduction_proxy_leveldb"
        rm -rf >/dev/null 2>&1 databases
        rm -rf >/dev/null 2>&1 Dawn*Cache
        rm -rf >/dev/null 2>&1 "Download Service"
        rm -rf >/dev/null 2>&1 "Extension State"
        rm -rf >/dev/null 2>&1 "Feature Engagement Tracker"
        rm -rf >/dev/null 2>&1 "File System"
        rm -rf >/dev/null 2>&1 "GCM Store"
        rm -rf >/dev/null 2>&1 GPUCache
        rm -rf >/dev/null 2>&1 "Managed Extension Settings"
        rm -rf >/dev/null 2>&1 IndexedDB
        rm -rf >/dev/null 2>&1 "Pepper Data"
        rm -rf >/dev/null 2>&1 "Platform Notifications"
        rm -rf >/dev/null 2>&1 "Site Characteristics Database"
        rm -rf >/dev/null 2>&1 shared_proto_db
        rm -rf >/dev/null 2>&1 "Service Worker"
        rm -rf >/dev/null 2>&1 Thumbnails
        rm -rf >/dev/null 2>&1 "Session Storage"
        rm -rf >/dev/null 2>&1 DownloadMetadata
        rm -rf >/dev/null 2>&1 "Extension Cookies"
        rm -rf >/dev/null 2>&1 "Extension Cookies-journal"
        rm -rf >/dev/null 2>&1 "Local Storage"
        rm -rf >/dev/null 2>&1 LOCK
        rm -rf >/dev/null 2>&1 LOG
        rm -rf >/dev/null 2>&1 LOG.old
        rm -rf >/dev/null 2>&1 MANIFEST-*
        rm -rf >/dev/null 2>&1 Network*
        rm -rf >/dev/null 2>&1 Origin*
        rm -rf >/dev/null 2>&1 QuotaManager*
        rm -rf >/dev/null 2>&1 "Reporting and NEL"
        rm -rf >/dev/null 2>&1 "Reporting and NEL-journal"
        rm -rf >/dev/null 2>&1 "Secure Preferences"
        rm -rf >/dev/null 2>&1 Shortcuts*
        rm -rf >/dev/null 2>&1 Storage
        rm -rf >/dev/null 2>&1 "Top Sites"
        rm -rf >/dev/null 2>&1 "Top Sites-journal"
        rm -rf >/dev/null 2>&1 "Translate Ranker Model"
        rm -rf >/dev/null 2>&1 TransportSecurity
        rm -rf >/dev/null 2>&1 "Search Logos"
        rm -rf >/dev/null 2>&1 "Visited Links"
        rm -rf >/dev/null 2>&1 "VideoDecodeStats"
        rm -rf >/dev/null 2>&1 "WebRTC Logs"
        rm -rf >/dev/null 2>&1 "WebrtcVideoStats"
        rm -rf >/dev/null 2>&1 "webrtc_event_logs"
        rm -rf >/dev/null 2>&1 optimization_guide_*
        rm -rf >/dev/null 2>&1 .com.google.Chrome.*
        rm -rf >/dev/null 2>&1 .org.chromium.Chromium.*
        rm -rf >/dev/null 2>&1 heavy_ad_intervention_opt_out.*
        rm -rf >/dev/null 2>&1 previews_opt_out.*
        rm -rf >/dev/null 2>&1 page_load_capping_opt_out.*
        rm -rf >/dev/null 2>&1 in_progress_download_metadata_store
        rm -rf >/dev/null 2>&1 chrome_cart_db
        rm -rf >/dev/null 2>&1 discounts_db
        rm -rf >/dev/null 2>&1 feedv2
        rm -rf >/dev/null 2>&1 parcel_tracking_db
        rm -rf >/dev/null 2>&1 PersistentOriginTrials
        rm -rf >/dev/null 2>&1 "Segmentation Platform"
        rm -rf >/dev/null 2>&1 "Sync Data"
        rm -rf >/dev/null 2>&1 "Trust Tokens"
        rm -rf >/dev/null 2>&1 "Trust Tokens-journal"
        rm -rf >/dev/null 2>&1 SharedStorage*
        rm -rf >/dev/null 2>&1 PrivateAggregation*
        rm -rf >/dev/null 2>&1 "Safe Browsing Cookies"
        rm -rf >/dev/null 2>&1 "Safe Browsing Cookies-journal"
        rm -rf >/dev/null 2>&1 "SCT Auditing Pending Reports"
        rm -rf >/dev/null 2>&1 DIPS*
        rm -rf >/dev/null 2>&1 BrowsingTopics*
    fi
fi
}

clean_chrome google-chrome
clean_chrome google-chrome-beta
clean_chrome google-chrome-unstable
clean_chrome chromium

# Brave Browser
clean_chrome BraveSoftware/Brave-Browser
clean_chrome BraveSoftware/Brave-Browser-Beta
clean_chrome BraveSoftware/Brave-Browser-Nightly

# Opera Browser
clean_chrome opera
clean_chrome opera-beta
clean_chrome opera-developer

function clean_electron_container () {
    if [[ -d ~/.config/$1 ]]; then
        cd ~/.config
        cd "${1}"
        rm -rf >/dev/null 2>&1 "Application Cache"
        rm -rf >/dev/null 2>&1 blob_storage
        rm -rf >/dev/null 2>&1 Cache
        rm -rf >/dev/null 2>&1 CachedData
        rm -rf >/dev/null 2>&1 "Code Cache"
        rm -rf >/dev/null 2>&1 Crashpad
        rm -rf >/dev/null 2>&1 "Crash Reports"
        rm -rf >/dev/null 2>&1 "exthost Crash Reports"
        rm -rf >/dev/null 2>&1 CS_skylib
        rm -rf >/dev/null 2>&1 databases
        rm -rf >/dev/null 2>&1 GPUCache
        rm -rf >/dev/null 2>&1 "Service Worker"
        rm -rf >/dev/null 2>&1 VideoDecodeStats
        rm -rf >/dev/null 2>&1 logs
        rm -rf >/dev/null 2>&1 tmp
        rm -rf >/dev/null 2>&1 media-stack
        rm -rf >/dev/null 2>&1 ecscache.json
        rm -rf >/dev/null 2>&1 skylib
        rm -rf >/dev/null 2>&1 LOG
        rm -rf >/dev/null 2>&1 logs.txt
        rm -rf >/dev/null 2>&1 old_logs_*
        rm -rf >/dev/null 2>&1 "Network Persistent State"
        rm -rf >/dev/null 2>&1 QuotaManager
        rm -rf >/dev/null 2>&1 QuotaManager-journal
        rm -rf >/dev/null 2>&1 TransportSecurity
        rm -rf >/dev/null 2>&1 watchdog*
    fi
}

# Microsoft Teams
clean_electron_container "Microsoft/Microsoft Teams"

# Microsoft Visual Studio Code
clean_electron_container "Code - Insiders"
clean_electron_container "Code - OSS"
clean_electron_container "Code"

# Simple Screen Recorder
if [[ -d ~/.ssr/logs ]]; then
    clean_directory ~/.ssr/logs
fi

# Kodi media center
if [[ -d ~/.kodi ]]; then
    clean_directory ~/.kodi/temp

    rm -rf >/dev/null 2>&1 ~/kodi_crashlog*.log
    rm -rf >/dev/null 2>&1 ~/core
fi

# HandBrake
if [[ -d ~/.config/ghb ]]; then
    clean_directory ~/.config/ghb/EncodeLogs

    rm -rf >/dev/null 2>&1 ~/.config/ghb/Activity.log.*
fi

# Nvidia
[[ -d ~/.nv ]] && sudo rm -rf ~/.nv;

# WGET hosts file
[[ -f ~/.wget-hsts ]] && rm -f ~/.wget-hsts;

# GNU parallel
[[ -d ~/.parallel ]] && rm -rf ~/.parallel;

# Wine
if [[ -d ~/.wine ]]; then
    clean_directory ~/.wine/drive_c/users/$USER/Temp
    clean_directory ~/.wine/drive_c/windows/temp
fi

# ccache
if which ccache >/dev/null 2>&1; then
    ccache -C
fi

# Optimus manager
if sudo ls /var/log/optimus-manager >/dev/null 2>&1; then
    clean_directory /var/log/optimus-manager
fi

# System cache
clean_directory ~/.cache
clean_directory /root/.cache

# System journal
if which journalctl >/dev/null 2>&1; then
    sudo journalctl --vacuum-time=1s
fi

# Old logs
sudo find /var/log -type f -name *.old -print0 | xargs -0 sudo rm -- >/dev/null 2>&1

# Error messages
if [[ -d /var/crash ]]; then
    clean_directory /var/crash
fi


#
# Arch Linux specific cleaning
#
if which pacman >/dev/null 2>&1; then
    # Old mirrorlists
    find /etc/pacman.d -maxdepth 1 -type f \( -name '*.bak' \) -print0 | xargs -0 sudo rm -- >/dev/null 2>&1

    # Pamac
    if [[ -d /var/tmp/pamac ]]; then
        sudo rm -rf >/dev/null 2>&1 /var/tmp/pamac
        sudo rm -rf >/dev/null 2>&1 /var/tmp/pamac-build-*
    fi

    # Fix blocked database error
    [[ -f /var/lib/pacman/db.lck ]] && sudo rm /var/lib/pacman/db.lck;

    # Yay
    if which yay >/dev/null 2>&1; then
        yay -Yc --noconfirm
    fi
    #sudo pacman -Rs $(pacman -Qtdq) --noconfirm
    sudo pacman -Sc --noconfirm
    sudo paccache -rk 0
fi


#
# Ubuntu/Debian specific cleaning
#
if which apt >/dev/null 2>&1; then
    # Remove old PPA after release upgrade
    if [[ -f /etc/apt/sources.list.distUpgrade ]]; then
        sudo rm /etc/apt/sources.list.distUpgrade
        find /etc/apt/apt.conf.d -type f \( -name '*.ucf-old' -o -name '*.ucf-dist' \) -print0 | xargs -0 sudo rm -- >/dev/null 2>&1
        find /etc/apt/sources.list.d -type f \( -name '*.distUpgrade' -o -name '*.dpkg-old' \) -print0 | xargs -0 sudo rm -- >/dev/null 2>&1

        find /etc/apt/sources.list.d -type f \
         -not -name *$(lsb_release -sc)* \
         -not -name 'skype*' \
         -not -name 'opera*' \
         -not -name 'virtualbox*' \
         -not -name 'google-chrome*' \
         -print0 | xargs -0 sudo rm -- >/dev/null 2>&1

        [[ -f /etc/apt/sources.list ]] && sudo rm /etc/apt/sources.list;
        sudo add-apt-repository -y "deb http://archive.canonical.com/ $(lsb_release -sc) partner"
        sudo software-properties-gtk
        exit
    fi

    # Launchpad cache
    [[ -d ~/.launchpadlib ]] && sudo rm -rf ~/.launchpadlib;

    # Fix broken packages
    sudo apt -f install -y

    # Old kernels
    if [[ ! -f /var/run/reboot-required ]]; then
        dpkg -l 'linux-image-*' 'linux-headers-*' 'linux-modules-*' \
        | sed '/^ii\|^rc/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' \
        | grep -v -E '*-hwe-*' \
        | xargs sudo apt purge --auto-remove -y
    fi

    # Remove unused packages (but keep dotnet since it can be marked as orphan)
    if which deborphan >/dev/null 2>&1; then
        sudo deborphan | grep -v -E 'dotnet-*' | xargs sudo apt purge --auto-remove -y
    fi

    sudo apt autoremove --purge -y
fi


# Use Bleachbit if available
if which bleachbit >/dev/null 2>&1; then
    bleachbit -c --preset
    sudo bleachbit -c --preset
fi

# TRIM
sudo fstrim -av

# Calculate result
FREE_SPACE_AT_END=$(get_free_space)
let SAVED_SPACE=$FREE_SPACE_AT_END-$FREE_SPACE_AT_START
# Do not display negative number
SAVED_SPACE=${SAVED_SPACE#-}
echo
echo "######################################################################"
echo "                   Recovered storage space: $(numfmt --from=iec --to=iec ${SAVED_SPACE}K)"
echo "######################################################################"

# Do not shutdown if CLEAN_ONLY variable is set
if [ ! -z $CLEAN_ONLY ]; then
    exit
fi

sleep 2
poweroff
